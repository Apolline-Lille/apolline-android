apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'jacoco'
apply plugin: 'com.akaita.android.easylauncher'


android {

    def influxdb_url = hasProperty('INFLUXDB_URL') ? INFLUXDB_URL : System.getenv('INFLUXDB_URL')
    def influxdb_dbname = hasProperty('INFLUXDB_DBNAME') ? INFLUXDB_DBNAME : System.getenv('INFLUXDB_DBNAME')
    def influxdb_usr = hasProperty('INFLUXDB_USR') ? INFLUXDB_USR : System.getenv('INFLUXDB_USR')
    def influxdb_pwd = hasProperty('INFLUXDB_PWD') ? INFLUXDB_PWD : System.getenv('INFLUXDB_PWD')

    compileSdkVersion 27
    buildToolsVersion '27.0.3'


    defaultConfig {
        applicationId "science.apolline"
        minSdkVersion 21
        targetSdkVersion 27

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        multiDexEnabled true
    }

    buildTypes {


        debug {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            buildConfigField "String", "INFLUXDB_URL", '"' + properties.getProperty('influxdb_url') + '"'
            buildConfigField "String", "INFLUXDB_DBNAME", '"' + properties.getProperty('influxdb_dbname') + '"'
            buildConfigField "String", "INFLUXDB_USR", '"' + properties.getProperty('influxdb_usr') + '"'
            buildConfigField "String", "INFLUXDB_PWD", '"' + properties.getProperty('influxdb_pwd') + '"'

            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'false'
            project.ext.sonarqube_url = '"' + properties.getProperty('sonarqube_url') + '"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "String", "INFLUXDB_URL", '"' + influxdb_url + '"'
            buildConfigField "String", "INFLUXDB_DBNAME", '"' + influxdb_dbname + '"'
            buildConfigField "String", "INFLUXDB_USR", '"' + influxdb_usr + '"'
            buildConfigField "String", "INFLUXDB_PWD", '"' + influxdb_pwd + '"'

            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'true'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    testOptions {

        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
    }

    // Ensure the no-op dependency is always used in JVM tests.
    configurations.all { config ->
        if (config.name.contains('UnitTest')) {
            config.resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                    details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
                }
            }
        }
    }

}


project.ext {
    appcompat_version = '27.1.0'
    aac_version = '1.0.0'
    ioio_version = '5.07'
    gms_version = '12.0.0'
    retrofit_version = '2.3.0'
    anko_version = '0.10.3'
    kodein_version = '4.1.0'
    leak_version = '1.5.4'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.google.firebase:firebase-core:$gms_version"
    implementation "com.android.support:support-v4:$appcompat_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // Android
    implementation "com.android.support:appcompat-v7:$appcompat_version"
    implementation "com.android.support:design:$appcompat_version"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:support-v4:$appcompat_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.2'

    // IOIO card
    implementation "com.github.ytai.ioio:IOIOLibAndroid:$ioio_version"
    implementation "com.github.ytai.ioio:IOIOLibAndroidBluetooth:$ioio_version"
    implementation "com.github.ytai.ioio:IOIOLibAndroidAccessory:$ioio_version"
    implementation "com.github.ytai.ioio:IOIOLibAndroidDevice:$ioio_version"

    // MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    // Google map
    implementation "com.google.android.gms:play-services-maps:$gms_version"
    implementation "com.google.android.gms:play-services-location:$gms_version"

    // Logger
    implementation 'com.orhanobut:logger:2.1.1'

    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // Room

    kapt "android.arch.persistence.room:compiler:$aac_version"
    implementation "android.arch.persistence.room:runtime:$aac_version"
    implementation "android.arch.lifecycle:common-java8:$aac_version"
    implementation "android.arch.persistence.room:rxjava2:$aac_version"
    testImplementation "android.arch.persistence.room:testing:$aac_version"

    // LiveData
    implementation 'android.arch.lifecycle:extensions:1.1.0'
    testImplementation "android.arch.core:core-testing:$aac_version"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-design:$anko_version"

    // OpenCSV
    implementation 'com.opencsv:opencsv:4.1'

    // MultiDex
    implementation 'com.android.support:multidex:1.0.3'

    // Android reactive location
    implementation 'pl.charmas.android:android-reactive-location2:2.1@aar'

    // Android Priority Job Queue
    implementation 'com.birbit:android-priority-jobqueue:2.0.1'

    // Green Robot Event Bus.
    implementation 'org.greenrobot:eventbus:3.0.0'

    // Geohash
    implementation 'ch.hsr:geohash:1.3.0'

    // Easy permission
    implementation 'pub.devrel:easypermissions:1.0.1'

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_version"

    // Crashlytics
    implementation "com.google.firebase:firebase-crash:$gms_version"
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }

    // FireBase performance
    implementation "com.google.firebase:firebase-perf:$gms_version"

    // Floating Actions
    implementation 'com.github.clans:fab:1.6.4'

    // Circle View
    implementation 'com.github.jakob-grabner:Circle-Progress-View:v1.3'

    // Toasty
    implementation 'com.github.GrenderG:Toasty:1.2.8'

    // Kodein
    implementation "com.github.salomonbrys.kodein:kodein-core:$kodein_version"
    implementation "com.github.salomonbrys.kodein:kodein:$kodein_version"
    implementation "com.github.salomonbrys.kodein:kodein-android:$kodein_version"

    // Google Maps heat map utility
    implementation 'com.google.maps.android:android-maps-utils:0.5'

    // SeekBar preferences
    implementation 'com.yokkomi:seekbar-preference:1.0'

}

repositories {
    mavenCentral()
}

configurations {
    all {
        exclude module: 'commons-logging'
    }
}



jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/reports")
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination file("${buildDir}/reports/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/jacoco")
        csv.destination file("${buildDir}/reports/jacocoTestReport.csv")
    }

    def fileFilter = [
            '**/*Parcel.class',
            '**/*$CREATOR.class',
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '**/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    sourceDirectories = files([mainSrc])

    classDirectories = files([debugTree], [kotlinDebugTree])

    executionData = fileTree(dir: buildDir, includes:
            ['**/*.exec', '**/*.ec'])
}

task sonarqube(dependsOn: 'jacocoTestReport')

apply plugin: 'com.google.gms.google-services'


