apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'jacoco'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    def influxdb_url = hasProperty('INFLUXDB_URL') ? INFLUXDB_URL : System.getenv('INFLUXDB_URL')
    def influxdb_dbname = hasProperty('INFLUXDB_DBNAME') ? INFLUXDB_DBNAME : System.getenv('INFLUXDB_DBNAME')
    def influxdb_usr = hasProperty('INFLUXDB_USR') ? INFLUXDB_USR : System.getenv('INFLUXDB_USR')
    def influxdb_pwd = hasProperty('INFLUXDB_PWD') ? INFLUXDB_PWD : System.getenv('INFLUXDB_PWD')

    compileSdkVersion 27
    buildToolsVersion '27.0.3'


    defaultConfig {
        applicationId "science.apolline"
        minSdkVersion 21
        targetSdkVersion 27
        
        versionCode 26
        versionName "2.4.9"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        multiDexEnabled true
    }


    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {

        debug {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            buildConfigField "String", "INFLUXDB_URL", '"' + properties.getProperty('influxdb_url') + '"'
            buildConfigField "String", "INFLUXDB_DBNAME", '"' + properties.getProperty('influxdb_dbname') + '"'
            buildConfigField "String", "INFLUXDB_USR", '"' + properties.getProperty('influxdb_usr') + '"'
            buildConfigField "String", "INFLUXDB_PWD", '"' + properties.getProperty('influxdb_pwd') + '"'

            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'false'
            project.ext.sonarqube_url = '"' + properties.getProperty('sonarqube_url') + '"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "String", "INFLUXDB_URL", '"' + influxdb_url + '"'
            buildConfigField "String", "INFLUXDB_DBNAME", '"' + influxdb_dbname + '"'
            buildConfigField "String", "INFLUXDB_USR", '"' + influxdb_usr + '"'
            buildConfigField "String", "INFLUXDB_PWD", '"' + influxdb_pwd + '"'

            buildConfigField 'boolean', 'ENABLE_CRASHLYTICS', 'true'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release

            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def date = new Date()
                    def formattedDate = date.format('dd-MM-yyyy')
                    outputFileName = "Apolline-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }

    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    testOptions {

        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
    }

//    flavorDimensions 'tier'
//    productFlavors {
//        development {
//            dimension 'tier'
//            applicationId "science.apolline"
//        }
//        production {
//            dimension 'tier'
//            applicationId "science.apolline"
//        }
//    }

}


project.ext {
    appcompat_version = '27.1.1'
    aac_version = '1.0.0'
    room_version = '1.0.0'
    ioio_version = '5.07'
    gms_maps_version = '15.0.1'
    gms_location_version = '15.0.1'
    firebase_core_version = '15.0.2'
    firebase_crash_version = '15.0.2'
    firebase_perf_version = '15.2.0'
    firebase_crashlytics_version = '2.9.1'
    retrofit_version = '2.4.0'
    anko_version = '0.10.5'
    kodein_version = '4.1.0'
    leak_version = '1.5.4'
    runner_version = '1.0.1'
    espresso_core_version = '3.0.1'
    constraint_layout_version = '1.1.0'
    junit_version = '4.12'
    rxjava2_adapter_version = '1.0.0'
    gson_version = '2.8.2'
    mpandroidchart_version = 'v3.0.3'
    logger_version = '2.2.0'
    rxandroid_version = '2.0.2'
    rxjava_version = '2.1.12'
    rxkotlin_version = '2.2.0'
    aac_lifecycle_version = '1.1.1'
    opencsv_version = '4.1'
    multidex_version = '1.0.3'
    android_reactive_location_version = '2.1@aar'
    android_priority_jobqueue_version = '2.0.1'
    eventbus_version = '3.0.0'
    geohash_version = '1.3.0'
    fab_version = '1.6.4'
    circle_progress_view_version = 'v1.3'
    toasty_version = '1.2.8'
    android_maps_utils_version = '0.5'
    seekbar_preference_version = '1.0'
    jacoco_version = '0.8.0'
    ripple_view_version = '1.0.1'
    circle_menu_version = '2.0.0'
    rxbluetooth_version = '2.0.1'
    kpermissions_version = '1.0.0'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.firebase:firebase-core:$firebase_core_version"
    implementation "com.android.support:support-v4:$appcompat_version"
    implementation "com.android.support:recyclerview-v7:$appcompat_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "com.android.support.test:runner:$runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_core_version"

    // Android
    implementation "com.android.support:appcompat-v7:$appcompat_version"
    implementation "com.android.support:design:$appcompat_version"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    implementation "com.android.support:support-v4:$appcompat_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$rxjava2_adapter_version"

    // Gson
    implementation "com.google.code.gson:gson:$gson_version"

    // IOIO card
    implementation "com.github.ytai.ioio:IOIOLibAndroid:$ioio_version"
    implementation "com.github.ytai.ioio:IOIOLibAndroidBluetooth:$ioio_version"
    implementation "com.github.ytai.ioio:IOIOLibAndroidAccessory:$ioio_version"
    implementation "com.github.ytai.ioio:IOIOLibAndroidDevice:$ioio_version"

    // MPAndroidChart
    implementation "com.github.PhilJay:MPAndroidChart:$mpandroidchart_version"

    // Google map
    implementation "com.google.android.gms:play-services-maps:$gms_maps_version"
    implementation "com.google.android.gms:play-services-location:$gms_location_version"

    // Logger
    implementation "com.orhanobut:logger:$logger_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"

    // Room
    kapt "android.arch.persistence.room:compiler:$room_version"
    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation "android.arch.lifecycle:common-java8:$room_version"
    implementation "android.arch.persistence.room:rxjava2:$room_version"
    testImplementation "android.arch.persistence.room:testing:$room_version"

    // LiveData
    implementation "android.arch.lifecycle:extensions:$aac_lifecycle_version"
    testImplementation "android.arch.core:core-testing:$aac_version"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-design:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
    implementation "org.jetbrains.anko:anko-sdk25:$anko_version"

    // OpenCSV
    implementation "com.opencsv:opencsv:$opencsv_version"

    // MultiDex
    implementation "com.android.support:multidex:$multidex_version"

    // Android reactive location
    implementation "pl.charmas.android:android-reactive-location2:$android_reactive_location_version"

    // Android Priority Job Queue
    implementation "com.birbit:android-priority-jobqueue:$android_priority_jobqueue_version"

    // Green Robot Event Bus.
    implementation "org.greenrobot:eventbus:$eventbus_version"

    // Geohash
    implementation "ch.hsr:geohash:$geohash_version"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_version"

    // Crashlytics
    implementation "com.google.firebase:firebase-crash:$firebase_crash_version"
    implementation("com.crashlytics.sdk.android:crashlytics:$firebase_crashlytics_version") {
        transitive = true
    }

    // FireBase performance
    implementation "com.google.firebase:firebase-perf:$firebase_perf_version"

    // Floating Actions
    implementation "com.github.clans:fab:$fab_version"

    // Circle View
    implementation "com.github.jakob-grabner:Circle-Progress-View:$circle_progress_view_version"

    // Toasty
    implementation "com.github.GrenderG:Toasty:$toasty_version"

    // Kodein
    implementation "com.github.salomonbrys.kodein:kodein-core:$kodein_version"
    implementation "com.github.salomonbrys.kodein:kodein:$kodein_version"
    implementation "com.github.salomonbrys.kodein:kodein-android:$kodein_version"

    // Google Maps heat map utility
    implementation "com.google.maps.android:android-maps-utils:$android_maps_utils_version"

    // SeekBar preferences
    implementation "com.yokkomi:seekbar-preference:$seekbar_preference_version"

    // Ripple view
    implementation "com.skyfishjy.ripplebackground:library:$ripple_view_version"

    // Circle Menu
    implementation "com.github.szugyi:Android-CircleMenu:$circle_menu_version"

    // Rx Bluetooth
    implementation "com.github.ivbaranov:rxbluetooth2:$rxbluetooth_version"

    // KPermissions
    implementation "com.github.fondesa:kpermissions:$kpermissions_version"

    //
    implementation 'com.squareup:android-times-square:1.6.5@aar'
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }

}

configurations {
    all {
        exclude module: 'commons-logging'
    }
}


jacoco {
    toolVersion = "$jacoco_version"
    reportsDir = file("$buildDir/reports")
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination file("${buildDir}/reports/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/jacoco")
        csv.destination file("${buildDir}/reports/jacocoTestReport.csv")
    }

    def fileFilter = [
            '**/*Parcel.class',
            '**/*$CREATOR.class',
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '**/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    sourceDirectories = files([mainSrc])

    classDirectories = files([debugTree], [kotlinDebugTree])

    executionData = fileTree(dir: buildDir, includes:
            ['**/*.exec', '**/*.ec'])
}

task sonarqube(dependsOn: 'jacocoTestReport')

apply plugin: 'com.google.gms.google-services'
