apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

import java.util.regex.Pattern

android {

    def influxdb_url = hasProperty('INFLUXDB_URL') ? INFLUXDB_URL : System.getenv('INFLUXDB_URL')
    def influxdb_dbname = hasProperty('INFLUXDB_DBNAME') ? INFLUXDB_DBNAME : System.getenv('INFLUXDB_DBNAME')
    def influxdb_usr = hasProperty('INFLUXDB_USR') ? INFLUXDB_USR : System.getenv('INFLUXDB_USR')
    def influxdb_pwd = hasProperty('INFLUXDB_PWD') ? INFLUXDB_PWD : System.getenv('INFLUXDB_PWD')

    compileSdkVersion 26
    buildToolsVersion '26.0.2'


    defaultConfig {
        applicationId "apoline.science"
        minSdkVersion 21
        targetSdkVersion 26

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {


        debug {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            buildConfigField "String", "INFLUXDB_URL", '"'+properties.getProperty('influxdb_url')+'"'
            buildConfigField "String", "INFLUXDB_DBNAME", '"'+properties.getProperty('influxdb_dbname')+'"'
            buildConfigField "String", "INFLUXDB_USR", '"'+properties.getProperty('influxdb_usr')+'"'
            buildConfigField "String", "INFLUXDB_PWD", '"'+properties.getProperty('influxdb_pwd')+'"'

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "String", "INFLUXDB_URL", '"'+influxdb_url+'"'
            buildConfigField "String", "INFLUXDB_DBNAME", '"'+influxdb_dbname+'"'
            buildConfigField "String", "INFLUXDB_USR", '"'+influxdb_usr+'"'
            buildConfigField "String", "INFLUXDB_PWD", '"'+influxdb_pwd+'"'

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }


    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        checkReleaseBuilds true
    }

    defaultConfig {
        multiDexEnabled true
    }

    tasks.whenTaskAdded { task ->
        if (task.name.equals("lint")) {
            task.enabled = false
        }
    }

    task('increaseVersionCode') {
        doLast {
            def manifestFile = file("src/main/AndroidManifest.xml")
            def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
            def manifestText = manifestFile.getText()
            def matcher = pattern.matcher(manifestText)
            matcher.find()
            def versionCode = Integer.parseInt(matcher.group(1))
            def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
            manifestFile.write(manifestContent)
        }
    }

    task('incrementVersionName') {
        doLast{
            def manifestFile = file("src/main/AndroidManifest.xml")
            def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
            def manifestText = manifestFile.getText()
            def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
            matcherVersionNumber.find()
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
            def pointVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def buildVersion = Integer.parseInt(matcherVersionNumber.group(3))
            def mNextVersionName = majorVersion + "." + pointVersion + "." + (buildVersion + 1)
            def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
            manifestFile.write(manifestContent)
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name == 'assembleRelease') {
            task.dependsOn 'increaseVersionCode'
            task.dependsOn 'incrementVersionName'
        }
    }

}


project.ext {
    appcompat = "26.1.0"
    rc = "1.0.0"
    ioio ="5.07"
    maps = "11.8.0"
    retrofit = "2.3.0"
    constraintLayout = "1.0.2"
    anko_version = "0.10.3"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // Android
    implementation "com.android.support:appcompat-v7:$project.appcompat"
    implementation "com.android.support:design:$project.appcompat"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:support-v4:$project.appcompat"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$project.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$project.retrofit"
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.2'

    // IOIO card
    implementation "com.github.ytai.ioio:IOIOLibAndroid:$project.ioio"
    implementation "com.github.ytai.ioio:IOIOLibAndroidBluetooth:$project.ioio"
    implementation "com.github.ytai.ioio:IOIOLibAndroidAccessory:$project.ioio"
    implementation "com.github.ytai.ioio:IOIOLibAndroidDevice:$project.ioio"

    // GraphView
    implementation 'com.jjoe64:graphview:4.2.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    // Google map
    implementation "com.google.android.gms:play-services-maps:$project.maps"

    // Logger
    implementation 'com.orhanobut:logger:2.1.1'

    // RxJaVa
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // Room

    kapt "android.arch.persistence.room:compiler:$project.rc"
    implementation "android.arch.persistence.room:runtime:$project.rc"
    implementation "android.arch.lifecycle:common-java8:$project.rc"
    implementation "android.arch.persistence.room:rxjava2:$project.rc"
    testImplementation"android.arch.persistence.room:testing:$project.rc"

    // LiveData
    implementation "android.arch.lifecycle:extensions:$project.rc"
    testImplementation "android.arch.core:core-testing:$project.rc"

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-design:$anko_version"

    // OpenCSV
    implementation 'com.opencsv:opencsv:4.1'

    // MultiDex
    implementation 'com.android.support:multidex:1.0.2'

    //RxLocation
    implementation 'pl.charmas.android:android-reactive-location2:2.1@aar'

}

repositories {
    mavenCentral()
}

configurations {
    all {
        exclude module: 'commons-logging'
    }
}


